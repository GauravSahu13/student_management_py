# -*- coding: utf-8 -*-
"""EXTC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11JLSLPzQD4nBDpwGImWQhz2p3vNZchJ6
"""

import pandas as pd
import matplotlib.pyplot as plt 
import numpy as np


''' Reading CSV file'''
student_df = pd.read_csv('student.csv')
# print(student_df.head())

''' NaN to Zero '''
student_df = student_df.fillna(0)
# print(student_df)


''' Filtering Data'''
# selecting rows based on condition
first_extc = student_df.loc[(student_df['Year'] == 1) & student_df['Branch']]
# print(first_extc)

''' Dropping Unnecessary Columns'''
first_extc = first_extc.loc[:, (first_extc != 0).any(axis=0)]
first_extc = first_extc.loc[(first_extc['Branch'] == 'EXTC')]
# print(first_extc)

''' Grouping data on basis of Name ,Year'''
finalFirstExtc = (first_extc.groupby(['Name','Enrolled_ID']).agg(M1= ('M1','sum'),CP= ('CP','sum'),BEE= ('BEE','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))).reset_index()
# finalFirstExtc = first_extc.groupby(['Name','Enrolled_ID']).agg(M1= ('M1','sum'),CP= ('CP','sum'),BEE= ('BEE','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))["Lec_Attended_Percentage"].nsmallest(20)
# print (finalFirstExtc)

# temp_df = finalFirstExtc[finalFirstExtc['Lec_Attended_Percentage'] >= 50]
# temp_df.plot(x='Name', y=['Lec_Attended_Percentage'], kind='bar',figsize=(15,10),width =0.25)
# plt.yticks(np.arange(0, 100, 5))
# plt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)
# plt.title("First Year Student of EXTC ")
# plt.legend(loc ="upper left")
# plt.show()

# temp_df = finalFirstExtc[finalFirstExtc['Lec_Attended_Percentage'] < 50]
# temp_df.plot(x='Name', y=['Lec_Attended_Percentage'], kind='bar',figsize=(15,10),width =0.25)
# plt.yticks(np.arange(0, 100, 10))
# plt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)
# plt.title("First Year Student of EXTC ")
# plt.legend(loc ="upper left")


'''defaulter list of M1'''
M1_df = finalFirstExtc[finalFirstExtc['Lec_Attended_Percentage'] < 40]
M1_df.plot(x='Name', y=['M1'], kind='bar',figsize=(15,10),width =0.5)

plt.yticks(np.arange(0, 100, 5))
plt.grid(color='#95a5a6', linestyle='--', linewidth=2, axis='y', alpha=0.7)
plt.title("First Year Student of EXTC ")
plt.legend(loc ="upper left")
plt.show()


# finalFirstExtc.describe()


#
# ''' Filtering Data'''
#
# # selecting rows based on condition
# second_extc = student_df.loc[(student_df['Year'] == 2) &
# 			student_df['Branch']]
# # print(second_extc)
#
# ''' Dropping Unnecessary Columns'''
#
# second_extc = second_extc.loc[:, (second_extc != 0).any(axis=0)]
# # second_extc = second_extc.loc[(second_extc['Branch'] == 'EXTC')]
# # print(second_extc)
#
# ''' Grouping data on basis of Name ,Year'''
#
# # finalSecondExtc = second_extc.groupby(['Name','Enrolled_ID']).agg(VSLI= ('VSLI','sum'),EV= ('EV','sum'),Robotics= ('Robotics','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))
# finalSecondExtc = second_extc.groupby(['Name','Enrolled_ID']).agg(VSLI= ('VSLI','sum'),EV= ('EV','sum'),Robotics= ('Robotics','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))["Lec_Attended_Percentage"].nsmallest(20)
# # print(finalSecondExtc)
#
#
#
# ''' Filtering Data'''
#
# # selecting rows based on condition
# third_extc = student_df.loc[(student_df['Year'] == 3) &
# 			student_df['Branch']]
# # print(third_extc)
#
# ''' Dropping Unnecessary Columns'''
#
# third_extc = third_extc.loc[:, (third_extc != 0).any(axis=0)]
# third_extc = third_extc.loc[(third_extc['Branch'] == 'EXTC')]
# print(third_extc)
#
# ''' Grouping data on basis of Name ,Year'''
#
# # finalThirdExtc = third_extc.groupby(['Name','Enrolled_ID']).agg(SAP= ('SAP','sum'),MBS= ('MBS','sum'),PLE= ('PLE','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))
# finalThirdExtc = third_extc.groupby(['Name','Enrolled_ID']).agg(SAP= ('SAP','sum'),MBS= ('MBS','sum'),PLE= ('PLE','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))["Lec_Attended_Percentage"].nsmallest(20)
# print(finalThirdExtc)
#
#
#
#
#
#
#
# options = ['COMPS','EXTC','IT','MECH']
#
# ''' Filtering Data'''
#
# # selecting rows based on condition
# fourth_extc = student_df.loc[(student_df['Year'] == 4) &
# 			student_df['Branch'].isin(options)]
#
# # print('\nResult dataframe :\n',
# # 	fourth_extc.head())
#
# ''' Dropping Unnecessary Columns'''
#
# fourth_extc=fourth_extc.loc[:, (fourth_extc != 0).any(axis=0)]
#
# fourth_extc = fourth_extc.loc[(fourth_extc['Branch'] == 'EXTC')]
# print(fourth_extc)
#
# ''' Grouping data on basis of Name ,Year'''
#
#
# # finalFourthExtc = fourth_extc.groupby(['Name','Enrolled_ID']).agg(ELE= ('ELE','sum'),FYP= ('FYP','sum'),MME= ('MME','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))
# finalFourthExtc = fourth_extc.groupby(['Name','Enrolled_ID']).agg(ELE= ('ELE','sum'),FYP= ('FYP','sum'),MME= ('MME','sum'),Lec_Attended_Percentage= ('Lec_Attended_Percentage','mean'))["Lec_Attended_Percentage"].nsmallest(20)
# print(finalFourthExtc)

